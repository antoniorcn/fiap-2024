import os
import oracledb
from oracledb import Connection
from modelo import Contato

class Repositorio:
    def __init__(self):
        self.usuario = os.environ.get("FIAP_ORACLE_USER")
        self.senha = os.environ.get("FIAP_ORACLE_PASS")
        self.db_path="oracle.fiap.com.br:1521/orcl"

    def gerar_conexao(self) -> Connection:
        con = oracledb.connect(
            user=self.usuario,
            password=self.senha,
            dsn=self.db_path)
        return con

    def adicionar_contato(self, contato : Contato) -> bool:
        conexao = self.gerar_conexao()
        cursor = conexao.cursor()
        sql = """INSERT INTO contatos (nome, telefone, email)
             VALUES (:1, :2, :3)"""
        try:
            cursor.execute(sql, (contato.nome, contato.telefone, contato.email))
            conexao.commit()
        except Exception:
            conexao.rollback()
            return False
        conexao.close()
        return True

    def pesquisar_contato(self, nome : str) -> list:
        conexao = self.gerar_conexao()
        cursor = conexao.cursor()
        sql = """SELECT * FROM contatos WHERE nome LIKE :1"""
        cursor.execute(sql, ("%" + nome + "%", ))
        resultado = []
        for dados in cursor:
            c1 = Contato(contato_id=dados[0],
                         nome=dados[1],
                         telefone=dados[2],
                         email=dados[3])
            resultado.append(c1)
        conexao.close()
        return resultado

    def remover_contato(self, contato_id : int) -> bool:
        conexao = self.gerar_conexao()
        cursor = conexao.cursor()
        sql = """DELETE FROM contatos WHERE id = :1"""
        try:
            cursor.execute(sql, (contato_id, ))
            conexao.commit()
        except Exception:
            conexao.rollback()
            return False
        conexao.close()
        return True

    def atualizar_contato(self, contato_id : int, contato : Contato) -> bool:
        conexao = self.gerar_conexao()
        cursor = conexao.cursor()
        sql = """UPDATE contatos SET nome = :1, telefone = :2, email = :3
             WHERE id = :4"""
        try:
            cursor.execute(sql, (contato.nome, contato.telefone,
                                 contato.email, contato_id))
            conexao.commit()
        except Exception:
            conexao.rollback()
            return False
        conexao.close()
        return True

    def gerar_tabela(self) -> bool:
        conexao = self.gerar_conexao()
        cursor = conexao.cursor()
        sql_check_if_exist = "SELECT 1 FROM contatos"
        sql_drop_table = """DROP TABLE contatos"""
        sql_drop_constraint = """DROP CONSTRAINT contatos_pk"""
        sql_create_table = """
            CREATE TABLE contatos (
                id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                nome varchar2(100),
                telefone varchar2(20),
                email varchar2(50)
            )
            """
        resultado = None
        try:
            print("Testando se a tabela existe...")
            resultado = cursor.execute(sql_check_if_exist)
            print("Resultado: ", resultado)
            if resultado:
                print("Dropando a tabela")
                cursor.execute(sql_drop_table)
                cursor.execute(sql_drop_constraint)
                conexao.commit()
        except Exception:
            print("Tabela inexistente")

        try:
            print("Criando a tabela")
            cursor.execute(sql_create_table)
            conexao.commit()
        except Exception as err:
            print("Erro: ", err)
            conexao.rollback()
            return False
        conexao.close()
        return True
